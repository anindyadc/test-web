[{"id":0,"href":"/devops/","title":"Devops","parent":"Techie Knowledgebase","content":""},{"id":1,"href":"/devops/Kubernetes-install/","title":"Kubernetes installation Howto","parent":"Devops","content":"Install Kubernetes Cluster on Ubuntu 22.04 with kubeadm.\nUpgrade your Ubuntu servers Install kubelet, kubeadm and kubectl Install Container runtime (Master and Worker nodes) Install Docker runtime Install Mirantis cri-dockerd as Docker Engine shim for Kubernetes Bootstrap Control plane (This is for single node controller) Install Kubernetes network plugin Add worker nodes to the k8 cluster Upgrade your Ubuntu servers sudo apt update sudo apt -y full-upgrade [ -f /var/run/reboot-required ] \u0026amp;\u0026amp; sudo reboot -f Install kubelet, kubeadm and kubectl Add kubernetes repository to the server\nsudo apt install curl apt-transport-https -y curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - echo \u0026#34;deb https://apt.kubernetes.io/ kubernetes-xenial main\u0026#34; | sudo tee /etc/apt/sources.list.d/kubernetes.list Install required package\nsudo apt update sudo apt install wget curl vim git kubelet kubeadm kubectl -y sudo apt-mark hold kubelet kubeadm kubectl Installation confirmation.\n$ kubectl version --client \u0026amp;\u0026amp; kubeadm version WARNING: This version information is deprecated and will be replaced with the output from kubectl version --short. Use --output=yaml|json to get the full version. Client Version: version.Info{Major:\u0026#34;1\u0026#34;, Minor:\u0026#34;25\u0026#34;, GitVersion:\u0026#34;v1.25.0\u0026#34;, GitCommit:\u0026#34;a866cbe2e5bbaa01cfd5e969aa3e033f3282a8a2\u0026#34;, GitTreeState:\u0026#34;clean\u0026#34;, BuildDate:\u0026#34;2022-08-23T17:44:59Z\u0026#34;, GoVersion:\u0026#34;go1.19\u0026#34;, Compiler:\u0026#34;gc\u0026#34;, Platform:\u0026#34;linux/amd64\u0026#34;} Kustomize Version: v4.5.7 kubeadm version: \u0026amp;version.Info{Major:\u0026#34;1\u0026#34;, Minor:\u0026#34;25\u0026#34;, GitVersion:\u0026#34;v1.25.0\u0026#34;, GitCommit:\u0026#34;a866cbe2e5bbaa01cfd5e969aa3e033f3282a8a2\u0026#34;, GitTreeState:\u0026#34;clean\u0026#34;, BuildDate:\u0026#34;2022-08-23T17:43:25Z\u0026#34;, GoVersion:\u0026#34;go1.19\u0026#34;, Compiler:\u0026#34;gc\u0026#34;, Platform:\u0026#34;linux/amd64\u0026#34;} Disable Swap Space\nsudo swapoff -a Check if swap has been disabled by running the free command.\n$ free -h total used free shared buff/cache available Mem: 966Mi 189Mi 127Mi 0.0Ki 649Mi 615Mi Swap: 0B 0B 0B Enable kernel modules\nsudo modprobe overlay sudo modprobe br_netfilter Add settings to sysctl\nsudo tee /etc/sysctl.d/kubernetes.conf\u0026lt;\u0026lt;EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF Reload sysctl\nsudo sysctl --system Install Container runtime (Master and Worker nodes) To run containers in Pods, Kubernetes uses a container runtime. Supported container runtimes are:\nDocker CRI-O Containerd Info\nDockershim has been removed from the Kubernetes project as of release 1.24. You need to install a container runtime into each node in the cluster so that Pods can run there. Kubernetes 1.25 requires that you use a runtime that conforms with the Container Runtime Interface (CRI). Install Docker runtime # Add repo and Install packages sudo apt update sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; sudo apt update sudo apt install -y containerd.io docker-ce docker-ce-cli # Create required directories sudo mkdir -p /etc/systemd/system/docker.service.d # Create daemon json config file sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;EOF { \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF # Start and enable Services sudo systemctl daemon-reload sudo systemctl restart docker sudo systemctl enable docker # Configure persistent loading of modules sudo tee /etc/modules-load.d/k8s.conf \u0026lt;\u0026lt;EOF overlay br_netfilter EOF # Ensure you load modules sudo modprobe overlay sudo modprobe br_netfilter # Set up required sysctl params sudo tee /etc/sysctl.d/kubernetes.conf\u0026lt;\u0026lt;EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF We proceed with the container runtime as Docker CE. Install Mirantis cri-dockerd as Docker Engine shim for Kubernetes Prepare to update\nsudo apt update sudo apt install git wget curl # get the latest release version VER=$(curl -s https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest|grep tag_name | cut -d \u0026#39;\u0026#34;\u0026#39; -f 4|sed \u0026#39;s/v//g\u0026#39;) echo $VER Download the archive file from Github cri-dockerd releases page\nwget https://github.com/Mirantis/cri-dockerd/releases/download/v${VER}/cri-dockerd-${VER}.amd64.tgz tar xvf cri-dockerd-${VER}.amd64.tgz sudo mv cri-dockerd/cri-dockerd /usr/local/bin/ # Validate cri-dockerd --version Configure systemd units for cri-dockerd:\nwget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket sudo mv cri-docker.socket cri-docker.service /etc/systemd/system/ sudo sed -i -e \u0026#39;s,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,\u0026#39; /etc/systemd/system/cri-docker.service Start and enable the services\nsudo systemctl daemon-reload sudo systemctl enable cri-docker.service sudo systemctl enable --now cri-docker.socket Confirm the service is now running:\n$ systemctl status cri-docker.socket Configure the kubelet to use cri-dockerd\nsudo kubeadm config images pull --cri-socket /run/cri-dockerd.sock Bootstrap Control plane (This is for single node controller) Initialise kubernetes cluster. sudo kubeadm init \\ --pod-network-cidr=10.244.0.0/16 \\ --cri-socket /run/cri-dockerd.sock \\ --ignore-preflight-errors=NumCPU,Mem To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Check Kubernetes cluster status. $ kubectl get nodes NAME STATUS ROLES AGE VERSION ip-172-31-30-23 NotReady control-plane 2m1s v1.25.0 Initialize control plane (run on first master node) lsmod | grep br_netfilter sudo systemctl enable kubelet Check cluster info. $ kubectl cluster-info Kubernetes control plane is running at https://172.31.30.23:6443 CoreDNS is running at https://172.31.30.23:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use \u0026#39;kubectl cluster-info dump\u0026#39;. Install Kubernetes network plugin Download flannel config file.\nwget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml Verify below section in the file and ensure it matches ip range mentioned above.\n....... ....... net-conf.json: | { \u0026#34;Network\u0026#34;: \u0026#34;10.244.0.0/16\u0026#34;, \u0026#34;Backend\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;vxlan\u0026#34; } ....... ....... Check kube flannel status.\n$ kubectl get pods -n kube-flannel NAME READY STATUS RESTARTS AGE kube-flannel-ds-zqqqx 1/1 Running 0 92s Verify ip range.\n$ ip r default via 172.31.16.1 dev eth0 proto dhcp src 172.31.30.23 metric 100 10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown 172.31.0.2 via 172.31.16.1 dev eth0 proto dhcp src 172.31.30.23 metric 100 172.31.16.0/20 dev eth0 proto kernel scope link src 172.31.30.23 metric 100 172.31.16.1 dev eth0 proto dhcp scope link src 172.31.30.23 metric 100 Now the cluster will be ready to serve.\n$ kubectl get nodes NAME STATUS ROLES AGE VERSION ip-172-31-30-23 Ready control-plane 14m v1.25.0 Get the cluster details to check.\n$ kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME ip-172-31-30-23 Ready control-plane 13m v1.25.0 172.31.30.23 \u0026lt;none\u0026gt; Ubuntu 22.04.1 LTS 5.15.0-1017-aws docker://20.10.17 Add worker nodes to the k8 cluster Run below command on the master/control plane node. kubeadm token create --print-join-command Output kubeadm join 172.31.30.23:6443 --token 4lw1ho.uycbcyuw08rma2kb --discovery-token-ca-cert-hash sha256:3952b82c082f32b38a487cf26a99698223540fad81e8fc99e57e6fb28d35d3c9 Run the above command in output within worker node. Now the cluster will show as below. $ kubectl get nodes NAME STATUS ROLES AGE VERSION ip-172-31-28-98 Ready \u0026lt;none\u0026gt; 22s v1.25.0 ip-172-31-30-23 Ready control-plane 4h26m v1.25.0 "},{"id":2,"href":"/Linux/","title":"Linux","parent":"Techie Knowledgebase","content":""},{"id":3,"href":"/posts/","title":"News","parent":"Techie Knowledgebase","content":""},{"id":4,"href":"/Linux/ExtendRootPartition/","title":"Extend Root Partition","parent":"Linux","content":" Extend partition fdisk -l Disk /dev/sda: 32.2 GB, 32212254720 bytes, 62914560 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x000420d1 Device Boot Start End Blocks Id System /dev/sda1 * 2048 2099199 1048576 83 Linux /dev/sda2 2099200 41943039 19921920 8e Linux LVM Disk /dev/mapper/centos-root: 18.2 GB, 18249416704 bytes, 35643392 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/mapper/centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes fdisk /dev/sda Enter p to print your initial partition table.\nEnter d (delete) followed by 2 to delete the existing partition definition.\nEnter n (new) followed by p (primary) followed by 2 to re-create partition number 2 and enter to accept the start block and enter again to accept the end block which is defaulted to the end of the disk.\nEnter t (type) then 2 then 8e to change the new partition type to \u0026ldquo;Linux LVM\u0026rdquo;.\nEnter p to print your new partition table and make sure the start block matches what was in the initial partition table printed above.\nEnter w to write the partition table to disk. You will see an error about Device or resource busy which you can ignore.\nUpdate kernel in-memory partition table After changing your partition table, run the following command to update the kernel in-memory partition table:\npartx -u /dev/sda Resize physical volume Resize the PV to recognize the extra space\npvresize /dev/vda2 Resize LV and filesystem In this command centos is the PV, root is the LV and /dev/vda2 is the partition that was extended. Use pvs and lvs commands to see your physical and logical volume names if you don\u0026rsquo;t know them. The -r option in this command resizes the filesystem appropriately so you don\u0026rsquo;t have to call resize2fs or xfs_growfs separately.\nlvextend -r centos/root /dev/sda2 "},{"id":5,"href":"/posts/initial-release/","title":"Initial release","parent":"News","content":"This is the first release of the Geekdoc theme.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo.\n"},{"id":6,"href":"/tags/Documentation/","title":"Documentation","parent":"Tags","content":""},{"id":7,"href":"/posts/hello_geekdoc/","title":"Hello Geekdoc","parent":"News","content":"This is the first release of the Geekdoc theme.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo.\nAmalia id per in minimum facility, quid facet modifier ea ma. Ill um select ma ad, en ferric patine sentient vim. Per expendable foreordained interpretations cu, maxim sole pertinacity in ram. Que no rota alters, ad sea sues exercise main rum, cu diam mas facility sea.\n"},{"id":8,"href":"/tags/","title":"Tags","parent":"Techie Knowledgebase","content":""},{"id":9,"href":"/tags/Updates/","title":"Updates","parent":"Tags","content":""},{"id":10,"href":"/_includes/","title":"Includes","parent":"Techie Knowledgebase","content":""},{"id":11,"href":"/_includes/include-page/","title":"Include Page","parent":"Includes","content":"Example page include\nExample Shortcode\nShortcode used in an include page. Head 1 Head 2 Head 3 1 2 3 "},{"id":12,"href":"/","title":"Techie Knowledgebase","parent":"","content":" Geekdoc is a simple Hugo theme for documentations. It is intentionally designed as a fast and lean theme and may not fit the requirements of complex projects. If a more feature-complete theme is required there are a lot of got alternatives out there.\nFeature overview Clean and simple design Stay focused on exploring the content and don\u0026rsquo;t get overwhelmed by a complex design. Light and mobile-friendly The theme is powered by less than 1 MB and looks impressive on mobile devices as well as on a regular Desktop. Easy customization The look and feel can be easily customized by CSS custom properties (variables), features can be adjusted by Hugo parameters. Zero initial configuration Getting started in minutes. The theme is shipped with a default configuration and works out of the box. Handy shortcodes We included some (hopefully) useful custom shortcodes so you don\u0026rsquo;t have to and can focus on writing amazing docs. Dark mode Powerful dark mode that detects your system preferences or can be controlled by a toggle switch. "}]